{
  "ver": "1.0.25",
  "uuid": "d51b3c38-d413-48e5-a820-22fc24f4d31e",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0 ;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n#if USE_TEXTURE\nuniform sampler2D texture;\n#endif\nuniform vec4 mainColor;\nfloat plot1(vec2 st){\n    return smoothstep(0.01, 0.00, abs(st.y - st.x));\n}\nfloat plot2(vec2 st, float pct){\n  return smoothstep(pct-0.02,pct,st.y) - smoothstep(pct,pct+0.02,st.y);\n}\nvec3 drawLine(vec3 color,float pct){\n    return (1.0 -pct) *color + pct *vec3(mainColor.r,mainColor.g,mainColor.b);\n}\nvoid main () {\n  vec2 st = vec2(v_uv0.x,-v_uv0.y+1.0);\n  vec3 color = vec3(1);\n  vec4 o = vec4(color,1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if STRAIGHT_LINE\n  float pct1 = plot1(st);\n  color = drawLine(color,pct1);\n  #endif\n  #if CURVE_LINE\n  float y1 = pow(st.x,5.0);\n  float pct2 = plot2(st,y1);\n  color = drawLine(color,pct2);\n  #endif\n  #if STEP_LINE\n  float y2 =step(0.5,st.x);\n  float pct3 = plot2(st,y2);\n  color = drawLine(color,pct3);\n  #endif\n  #if SMOOTHSTEP_LINE\n  float y3 = smoothstep(0.1,0.9,st.x);\n  float pct4 = plot2(st,y3);\n  color = drawLine(color,pct4);\n  #endif\n  #if SIN_LINE\n  float y4 = sin((st.x+0.125)*10.)/5. +0.5;\n  float pct5 = plot2(st,y4);\n  color = drawLine(color,pct5);\n  #endif\n  #if COS_LINE\n  float y5 = cos((st.x+0.125)*10.)/5. +0.5;\n  float pct6 = plot2(st,y5);\n  color = drawLine(color,pct6);\n  #endif\n  #if TAN_LINE\n  float y6 = tan((st.x+0.125)*5.)/5. +0.5;\n  float pct7 = plot2(st,y6);\n  color = drawLine(color,pct7);\n  #endif\n  o *= v_color;\n  o *= vec4(color,1.0);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_color;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0 ;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\n#if USE_TEXTURE\nuniform sampler2D texture;\n#endif\nuniform OutLine{\n  vec4 mainColor;\n};\nfloat plot1(vec2 st){\n    return smoothstep(0.01, 0.00, abs(st.y - st.x));\n}\nfloat plot2(vec2 st, float pct){\n  return smoothstep(pct-0.02,pct,st.y) - smoothstep(pct,pct+0.02,st.y);\n}\nvec3 drawLine(vec3 color,float pct){\n    return (1.0 -pct) *color + pct *vec3(mainColor.r,mainColor.g,mainColor.b);\n}\nvoid main () {\n  vec2 st = vec2(v_uv0.x,-v_uv0.y+1.0);\n  vec3 color = vec3(1);\n  vec4 o = vec4(color,1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  #if STRAIGHT_LINE\n  float pct1 = plot1(st);\n  color = drawLine(color,pct1);\n  #endif\n  #if CURVE_LINE\n  float y1 = pow(st.x,5.0);\n  float pct2 = plot2(st,y1);\n  color = drawLine(color,pct2);\n  #endif\n  #if STEP_LINE\n  float y2 =step(0.5,st.x);\n  float pct3 = plot2(st,y2);\n  color = drawLine(color,pct3);\n  #endif\n  #if SMOOTHSTEP_LINE\n  float y3 = smoothstep(0.1,0.9,st.x);\n  float pct4 = plot2(st,y3);\n  color = drawLine(color,pct4);\n  #endif\n  #if SIN_LINE\n  float y4 = sin((st.x+0.125)*10.)/5. +0.5;\n  float pct5 = plot2(st,y4);\n  color = drawLine(color,pct5);\n  #endif\n  #if COS_LINE\n  float y5 = cos((st.x+0.125)*10.)/5. +0.5;\n  float pct6 = plot2(st,y5);\n  color = drawLine(color,pct6);\n  #endif\n  #if TAN_LINE\n  float y6 = tan((st.x+0.125)*5.)/5. +0.5;\n  float pct7 = plot2(st,y6);\n  color = drawLine(color,pct7);\n  #endif\n  o *= v_color;\n  o *= vec4(color,1.0);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}